package RSA;

import java.math.BigInteger;

public class RSA {
	/**
	 * TGS服务器的公钥
	 */
	public static String TGSPublicKey = "65537&12212690687876111778631914058053907976672300451113723158078853698843000468416739308414181522225554504542219939793375968679427188159730219293000830899772769066746380191645968656774232302544015186785263475832891868277798832771100729783896725712096811259212894243591440731016513297774084827386817208464370668118510828455653669260208409066084619658228019359651857026389909006539430417151844000764455572849945097089283151421428135744852391646439525779749842257922838275014988726831619189559790172218242953019246646473673072924757195240042233223846998606331043164626716215112204416985916658702487045605969466575568761671927";
	
	/**
	 * 聊天应用服务器的公钥
	 */
	public static String ChatServerPublicKey = "65537&24939412851792017341433983041853385544439316891084434582068824517997516912997756104244445946338318587035793654527250842689287586037725783325035506738918998572208619541146401910294900050070690254366506474231994935174581127480000859539890011078293388464297959682561142964607014423152587470955973889962228142082872111530342973041750666450651149645148894221551259287587540100801244160277084159093706446139061973799178505817972182958748332709022690079998427857362092625678433711746599108438156823702493991805026529354100045300968836980819234474531351499937273165363552991339465793345974870738216141754799426493447310154867";
	
	
	
	/**
	 * RSA加密一组byte
	 * @param Key 加密数据时用公钥，做签名时用私钥
	 * @param src 
	 * @return 
	 */
	public static byte[] encrypt(String Key, byte[] src){
		
		BigInteger a = new BigInteger(KeyManger.getKeyMain(Key));
		BigInteger n = new BigInteger(KeyManger.getKeyN(Key));
		
		BigInteger m = new BigInteger(src);
		BigInteger c = m.modPow(a, n);
        return c.toByteArray();
	}
	
	/**
	 * RSA解密一组byte
	 * @param Key 解密数据时用私钥，认证签名时用公钥
	 * @param src 
	 * @return 
	 */
	public static byte[] decrypt(String Key, byte[] src){
		
		StringBuffer buffer = new StringBuffer();
		BigInteger a = new BigInteger(KeyManger.getKeyMain(Key));
		BigInteger n = new BigInteger(KeyManger.getKeyN(Key));
		
		BigInteger c = new BigInteger(src);
		BigInteger m = c.modPow(a, n);
		
		byte[] tarBytes = m.toByteArray();
		
		for(int i=0;i<tarBytes.length;i++){
			buffer.append((char)tarBytes[i]);
        }
        return buffer.toString().getBytes();
	}
}
